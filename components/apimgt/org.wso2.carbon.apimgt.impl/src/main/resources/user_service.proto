syntax = "proto3";

//go:generate go run ${PROJECT_DIR}/tools/fake_gen.go

package org.wso2.carbon.apimgt.impl.choreo.apis;

import "types.proto";
import "validate/validate.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/wso2-enterprise/choreo-runtime/pkg/apis";


service UserService {
    rpc RegisterUser (RegisterUserRequest) returns (RegisterUserResponse);
    rpc ValidateUser (ValidateUserRequest) returns (ValidateUserResponse);
    rpc FindUserFromIdpId (FindUserFromIdpIdRequest) returns (FindUserFromIdpIdResponse);
    rpc AddOrganizationUsers (AddOrganizationUsersRequest) returns (google.protobuf.Empty);
    rpc DeleteOrganizationUser (DeleteOrganizationUserRequest) returns (google.protobuf.Empty);
    rpc FindUserOrganizations (FindUserOrganizationsRequest) returns (FindUserOrganizationsResponse);
    rpc FindUsersByOrganization (FindUsersByOrganizationRequest) returns (FindUsersByOrganizationResponse);
    rpc FindUsersByOrganizationByRole (FindUsersByOrganizationByRoleRequest) returns (FindUsersByOrganizationByRoleResponse);
    // todo: increase rpc payload size to 10mb
    rpc CreateUserFeedback (CreateUserFeedbackRequest) returns (CreateUserFeedbackResponse);
    rpc GetUserInfo (GetUserInfoRequest) returns (GetUserInfoResponse);
    rpc GetUserRoles (GetUserRolesRequest) returns (GetUserRolesResponse);
    rpc GetEnterpriseUserRoles (GetEnterpriseUserRolesRequest) returns (GetUserRolesResponse);
    rpc UpdateMembersOfRole (UpdateMembersOfRoleRequest) returns (UpdateMembersOfRoleResponse);
    rpc UpdateRolesOfMember (UpdateRolesOfMemberRequest) returns (UpdateRolesOfMemberResponse);

    rpc StartInvitationFlow (StartInvitationFlowRequest) returns (StartInvitationFlowResponse);

    // Organizations
    rpc CreateOrganization (CreateOrganizationRequest) returns (CreateOrganizationResponse);
    rpc GetOrganization (GetOrganizationRequest) returns (GetOrganizationResponse);
    rpc UpdateOrganization (UpdateOrganizationRequest) returns (UpdateOrganizationResponse);
    rpc DeleteOrganization (DeleteOrganizationRequest) returns (DeleteOrganizationResponse);
    rpc ListOrganizations (ListOrganizationsRequest) returns (ListOrganizationsResponse);
    rpc ListOrganizationEnvIds (ListOrganizationEnvIdsRequest) returns (ListOrganizationEnvIdsResponse);
    rpc CreateDefaultEnvironmentsForOrgs (CreateDefaultEnvironmentsForOrgsRequest) returns (CreateDefaultEnvironmentsForOrgsResponse);

    // Groups
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse);
    rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupResponse);
    rpc ListGroups (ListGroupsRequest) returns (ListGroupsResponse);
    rpc ListUserGroups (ListUserGroupsRequest) returns (ListUserGroupsResponse);
    rpc GetGroupInfo (GetGroupInfoRequest) returns (GetGroupInfoResponse);
    rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse);
    rpc RemoveMemberFromGroup (RemoveMemberFromGroupRequest) returns (RemoveMemberFromGroupResponse);

    // Roles
    rpc CreateRole (CreateRoleRequest) returns (CreateRoleResponse);
    rpc UpdateRole (UpdateRoleRequest) returns (UpdateRoleResponse);
    rpc GetRoleInfo (GetRoleInfoRequest) returns (GetRoleInfoResponse);
    rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse);
    rpc ListRoles (ListRolesRequest) returns (ListRolesResponse);
    rpc GetPermissionList (GetPermissionListRequest) returns (GetPermissionListResponse);

    // Org-member invitations
    rpc SendMemberInvitation (SendMemberInvitationRequest) returns (SendMemberInvitationResponse);
    rpc AcceptMemberInvitation (AcceptMemberInvitationRequest) returns (AcceptMemberInvitationResponse);
    rpc FindMemberInvitation (FindMemberInvitationRequest) returns (FindMemberInvitationResponse);
    rpc DeleteMemberInvitation (DeleteMemberInvitationRequest) returns (DeleteMemberInvitationResponse);
    rpc ListMemberInvitations (ListMemberInvitationsRequest) returns (ListMemberInvitationsResponse);

}

message CreateGroupRequest {
    string display_name = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[A-Za-z][A-Za-z0-9-_ ]*$"];
    string organization_name = 2 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    bool default = 3;
    string description = 4 [(validate.rules).string.max_len = 255, (validate.rules).string.pattern = "^[A-Za-z0-9-_'., ]*$"];
    repeated GroupTag groupTagArr = 5;
}

message CreateGroupResponse {
    Group group = 1 [(validate.rules).message.required = true];
}

message UpdateGroupRequest {
    string group_handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z][a-z0-9-]+$"];
    string display_name = 2 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[A-Za-z0-9-_ ]*$"];
    string organization_name = 3 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    string description = 4 [(validate.rules).string.max_len = 255, (validate.rules).string.pattern = "^[A-Za-z0-9-_'., ]*$"];
    repeated GroupTag groupTagArr = 5;
}

message UpdateGroupResponse {
    Group group = 1 [(validate.rules).message.required = true];
}

message RemoveMemberFromGroupRequest {
    string group_name = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z][a-z0-9-]+$"];
    string organization_name = 2 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    string idp_id = 3 [(validate.rules).string.uuid = true];
}

message RemoveMemberFromGroupResponse {
    User user = 1 [(validate.rules).message.required = true];
}

message ListGroupsRequest {
    repeated string tags = 1 [(validate.rules).repeated.items.string.pattern = "^[A-Za-z0-9-_ ]*$"];
    string role = 2 [(validate.rules).string.pattern = "^[a-z0-9-]*$"];
    repeated string includes = 3 [(validate.rules).repeated.items.string.pattern = "^[a-z0-9-]*$"];
    string organization_name = 4 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
}

message ListGroupsResponse {
    repeated Group groups = 1;
}

message GetGroupInfoRequest {
    string handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9-]*$"];
    repeated string includes = 2 [(validate.rules).repeated.items.string.pattern = "^[a-z0-9-]*$"];
    string organization_name = 3 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
}

message GetGroupInfoResponse {
    Group group = 1 [(validate.rules).message.required = true];
}

message DeleteGroupRequest {
    string handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9-]*$"];
    string organization_name = 2 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
}

message DeleteGroupResponse {
    Group group = 1 [(validate.rules).message.required = true];
}

message CreateRoleRequest {
    string display_name = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[A-Za-z][A-Za-z0-9-_ ]*$"];
    string organization_name = 2 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    string description = 3 [(validate.rules).string.max_len = 255, (validate.rules).string.pattern = "^[A-Za-z0-9-_'., ]*$"];
    repeated Permission permissionArr = 4;
}

message CreateRoleResponse {
    Role role = 1 [(validate.rules).message.required = true];
}

message GetRoleInfoRequest {
    string handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9-]*$"];
    repeated string includes = 2 [(validate.rules).repeated.items.string.pattern = "^[a-z0-9-]*$"];
    string organization_name = 3 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
}

message GetRoleInfoResponse {
    Role role = 1 [(validate.rules).message.required = true];
}

message DeleteRoleRequest {
    string handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9-]*$"];
    string organization_name = 2 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
}

message DeleteRoleResponse {
    Role role = 1 [(validate.rules).message.required = true];
}

message UpdateRoleRequest {
    string role_handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z][a-z0-9-]+$"];
    string display_name = 2 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[A-Za-z0-9-_ ]*$"];
    string organization_name = 3 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    string description = 4 [(validate.rules).string.max_len = 255, (validate.rules).string.pattern = "^[A-Za-z0-9-_'., ]*$"];
    repeated Permission permissionArr = 5;
}

message UpdateRoleResponse {
    Role role = 1 [(validate.rules).message.required = true];
}

message ListRolesRequest {
    repeated string includes = 1 [(validate.rules).repeated.items.string.pattern = "^[a-z0-9-]*$"];
    string organization_name = 2 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    string offset = 3 [(validate.rules).string.pattern = "(^[0-9]+$|^$)"];
    string limit = 4 [(validate.rules).string.pattern = "^[a-z0-9-]*$"];
    string search = 5 [(validate.rules).string.pattern = "^[A-Za-z0-9-_'., ]*$"];
}

message ListRolesResponse {
    PaginatedRole paginatedRole = 1;
}

message SendMemberInvitationRequest {
    string handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    repeated string email_arr = 2 [(validate.rules).repeated.items.string.email = true];
    repeated string group_arr = 3 [(validate.rules).repeated.items.string.max_len = 30, (validate.rules).repeated.items.string.pattern = "^[a-z0-9-]+$"];
    string authenticated_user_email  = 4 [(validate.rules).string.email = true];
}

message SendMemberInvitationResponse {
    repeated string successful_list = 1 [(validate.rules).repeated.items.string.email = true];
    repeated string unsuccessful_list = 2 [(validate.rules).repeated.items.string.email = true];
}

message AcceptMemberInvitationRequest {
    string handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    string confirmation_key = 2 [(validate.rules).string.uuid = true];
    string authenticated_user_email  = 3 [(validate.rules).string.email = true];
}

message AcceptMemberInvitationResponse {
    int64 status = 1;
    string message = 2;
}

message FindMemberInvitationRequest {
    string handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    string confirmation_key = 2 [(validate.rules).string.uuid = true];
}

message ListMemberInvitationsRequest {
    string organization_handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    string group_handle = 2 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9-]*$"];
}

message FindMemberInvitationResponse {
    MemberInvitation member_invitation = 1 [(validate.rules).message.required = true];
}

message ListMemberInvitationsResponse {
    repeated MemberInvitation invitations = 1;
}

message DeleteMemberInvitationRequest {
    string handle = 1 [(validate.rules).string.max_len = 30, (validate.rules).string.pattern = "^[a-z0-9]{3,30}$"];
    string email = 2 [(validate.rules).string.email = true];
}

message DeleteMemberInvitationResponse {
}

message RegisterUserRequest {
    User user = 1 [(validate.rules).message.required = true];
    string name = 2 [(validate.rules).string.min_len = 1];
    string email = 3 [(validate.rules).string.email = true];
    string invitation_correlation_key = 4;
}

message RegisterUserResponse {
    User user = 1 [(validate.rules).message.required = true];
    Organization organization = 2 [(validate.rules).message.required = true];
}

message ValidateUserRequest {
    string user_idp_id = 1 [(validate.rules).string.min_len = 1];
    string email = 2 [(validate.rules).string.email = true];
    string invitation_correlation_key = 3;
    bool is_anonymous = 4;
}

message ValidateUserResponse {
    User user = 1;
    repeated Organization organizations = 2;
}

message AddOrganizationUsersRequest {
    repeated string user_idp_id_list = 1 [(validate.rules).repeated.items.string.uuid = true];
    string organization_name = 2 [(validate.rules).string.min_len = 1];
    string group = 3 [(validate.rules).string.min_len = 1];
}

message DeleteOrganizationUserRequest {
    string user_idp_id = 1 [(validate.rules).string.min_len = 1];
    string organization_name = 2 [(validate.rules).string.min_len = 1];
}

message UpdateMembersOfRoleRequest {
    repeated string user_idp_id_list = 1 [(validate.rules).repeated.items.string.uuid = true];
    string organization_name = 2 [(validate.rules).string.min_len = 1];
    string role = 3 [(validate.rules).string.min_len = 1];
}

message UpdateMembersOfRoleResponse {
    Role role = 1 [(validate.rules).message.required = true];
}

message UpdateRolesOfMemberRequest {
    repeated string role_handlers_list = 1 [(validate.rules).repeated.items.string.max_len = 30, (validate.rules).repeated.items.string.pattern = "^[a-z][a-z0-9-]+$"];
    string organization_name = 2 [(validate.rules).string.min_len = 1];
    string user_idp_id = 3 [(validate.rules).string.min_len = 1];
}

message UpdateRolesOfMemberResponse {
    User user = 1 [(validate.rules).message.required = true];
}

message FindUserOrganizationsRequest {
    User user = 1 [(validate.rules).message.required = true];
}

message FindUserOrganizationsResponse {
    User user = 1;
    repeated Organization organizations = 2;
}

message FindUsersByOrganizationRequest {
    string organization_name = 1 [(validate.rules).string.min_len = 1];
    repeated string excluding_groups = 2 [(validate.rules).repeated.items.string.pattern = "^[a-z][a-z0-9-]*$"];
}

message FindUsersByOrganizationResponse {
    repeated User users = 1;
}

message FindUsersByOrganizationByRoleRequest {
    string organization_name = 1 [(validate.rules).string.min_len = 1];
    repeated string excluding_roles = 2 [(validate.rules).repeated.items.string.pattern = "^[a-z][a-z0-9-]*$"];
}

message FindUsersByOrganizationByRoleResponse {
    repeated User users = 1;
}

message FindUserFromIdpIdRequest {
    string user_idp_id = 1 [(validate.rules).string.min_len = 1];
    string organization_name = 2 [(validate.rules).string.min_len = 1];
}

message FindUserFromIdpIdResponse {
    User user = 1;
}

message CreateUserFeedbackRequest {
    string title = 1 [(validate.rules).string.min_len = 1];
    string description = 2 [(validate.rules).string.min_len = 1];
    bytes image_content = 3;
    string image_link = 4;
}

message CreateUserFeedbackResponse {
    string issue_url = 1 [json_name = "issue_url", (validate.rules).string.min_len = 1];
}

message GetUserInfoRequest {
    string user_idp_id = 1 [(validate.rules).string.min_len = 1];
    string organization_name = 2 [(validate.rules).string.min_len = 1];
    repeated string includes = 3 [(validate.rules).repeated.items.string.pattern = "^[a-z0-9-]*$"];
}

message GetUserInfoResponse {
    User user = 1;
}

message GetUserRolesRequest {
    string user_idp_id = 1 [(validate.rules).string.min_len = 1];
    string organization_name = 2 [(validate.rules).string.min_len = 1];
}

message GetEnterpriseUserRolesRequest {
    string user_idp_id = 1 [(validate.rules).string.min_len = 1];
    string organization_name = 2 [(validate.rules).string.min_len = 1];
    repeated string group_list = 3;
}

message GetUserRolesResponse {
    repeated Role roles = 1;
}

message StartInvitationFlowRequest {
    string code = 1 [(validate.rules).string.len = 10];
    string email = 2 [(validate.rules).string.email = true];
}

message StartInvitationFlowResponse {
    string redirect_url = 1 [(validate.rules).string.uri = true];
}

message CreateOrganizationRequest {
    Organization organization = 1 [(validate.rules).message.required = true];
    string user_email = 2 [(validate.rules).string.min_len = 1];
}

message CreateOrganizationResponse {
    Organization organization = 1 [(validate.rules).message.required = true];
}

message GetOrganizationRequest {
    string organization_name = 1 [(validate.rules).string.min_len = 1];
}

message GetOrganizationResponse {
    Organization organization = 1 [(validate.rules).message.required = true];
    bool is_admin = 2 ;
}

message UpdateOrganizationRequest {
    string organization_name = 1 [(validate.rules).string.min_len = 1];
    Organization organization = 3 [(validate.rules).message.required = true];
}

message UpdateOrganizationResponse {
    Organization organization = 1 [(validate.rules).message.required = true];
}

message DeleteOrganizationRequest {
    string organization_name = 1 [(validate.rules).string.min_len = 1];
    string user_email = 2;
}

message DeleteOrganizationResponse {
    Organization organization = 1 [(validate.rules).message.required = true];
}

message ListOrganizationsRequest {
}

message ListOrganizationsResponse {
    repeated Organization organizations = 1;
}

message ListUserGroupsRequest {
    string user_idp_id = 1 [(validate.rules).string.uuid = true];
}

message ListUserGroupsResponse {
    repeated Group groups = 1;
}

message ListOrganizationEnvIdsRequest {
    string organization_name = 1 [(validate.rules).string.min_len = 1];
}

message ListOrganizationEnvIdsResponse {
    repeated EnvironmentId environment_ids = 1;
}

message CreateDefaultEnvironmentsForOrgsRequest {
    repeated Organization organizations = 1;
}

message CreateDefaultEnvironmentsForOrgsResponse {

}

message GetPermissionListRequest{
    string search = 1 [(validate.rules).string.max_len = 30];
}

message GetPermissionListResponse {
    repeated PermissionTree permission_trees = 1;
}